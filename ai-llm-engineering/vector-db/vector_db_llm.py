import os
import sys
from dotenv import load_dotenv
import chromadb
import ollama
from chromadb.utils import embedding_functions

# Load environment variables from .env file
load_dotenv()

# Initialize the Chroma client with persistence
chroma_client = chromadb.PersistentClient(path="/mnt/c/Temp/llm/chroma_persist")
collection_name = "document_qa_collection"

# Delete existing collection if it exists
try:
    chroma_client.delete_collection(collection_name)
    print(f"Deleted existing collection: {collection_name}")
except Exception as e:
    print(f"Collection may not exist yet, skipping deletion: {e}")

# sys.exit() 

# Function to generate embeddings using Ollama
def get_ollama_embedding(text):
    client = ollama.Client(host='http://host.docker.internal:11434')
    response = client.embeddings(model="nomic-embed-text", prompt=text)
    embedding = response["embedding"]
    print("==== Generating embeddings... ====")
    return embedding

# Create a custom embedding function
class OllamaEmbeddingFunction:
    def __call__(self, input):
        embeddings = []
        for text in input:
            embedding = get_ollama_embedding(text)
            embeddings.append(embedding)
        return embeddings

# Use our custom embedding function instead of the default one
ollama_ef = OllamaEmbeddingFunction()

# Create the collection with the custom embedding function
collection = chroma_client.get_or_create_collection(
    name=collection_name,
    metadata={"hnsw:space": "cosine"},
    embedding_function=ollama_ef
)

# =================================
# === For initial setup -- Uncomment (below) all for the first run, and then comment it all out ===
# =================================


# Function to load documents from a directory
def load_documents_from_directory(directory_path):
    print("==== Loading documents from directory ====")
    documents = []
    for filename in os.listdir(directory_path):
        if filename.endswith(".txt"):
            with open(os.path.join(directory_path, filename), "r", encoding="utf-8") as file:
                documents.append({"id": filename, "text": file.read()})
    return documents

# Function to split text into chunks
def split_text(text, chunk_size=1000, chunk_overlap=20):
    chunks = []
    start = 0
    while start < len(text):
        end = start + chunk_size
        chunks.append(text[start:end])
        start = end - chunk_overlap
    return chunks

# Load documents from the directory
directory_path = "/mnt/c/Temp/llm/docs"
documents = load_documents_from_directory(directory_path)

print(f"Loaded {len(documents)} documents")

# Split the documents into chunks
chunked_documents = []
for doc in documents:
    chunks = split_text(doc["text"])
    print("==== Splitting docs into chunks ====")
    for i, chunk in enumerate(chunks):
        chunked_documents.append({"id": f"{doc['id']}_chunk{i+1}", "text": chunk})

# Upsert documents into Chroma - the embeddings will be generated by the collection's embedding function
ids = [doc["id"] for doc in chunked_documents]
texts = [doc["text"] for doc in chunked_documents]
collection.upsert(ids=ids, documents=texts)

# === End of the initial setup -- Uncomment all for the first run, and then comment it all out ===
# =================================


# Function to query documents
def query_documents(question, n_results=2):
    results = collection.query(query_texts=[question], n_results=n_results)
    relevant_chunks = results["documents"][0]  # Extract first list from nested lists
    print("==== Returning relevant chunks ====")
    return relevant_chunks

# Function to generate a response from Ollama
def generate_response(question, relevant_chunks):
    context = "\n\n".join(relevant_chunks)
    prompt = (
        "You are an assistant for question-answering tasks. Use the following pieces of "
        "retrieved context to answer the question. If you don't know the answer, say that you "
        "don't know. Use three sentences maximum and keep the answer concise."
        "\n\nContext:\n" + context + "\n\nQuestion:\n" + question
    )
    client = ollama.Client(host='http://host.docker.internal:11434')
    response = client.chat(model="llama3.2:latest", messages=[{"role": "user", "content": prompt}])
    answer = response["message"]["content"]
    return answer

question = "give me info about Pando"
relevant_chunks = query_documents(question)
answer = generate_response(question, relevant_chunks)

print("==== Answer ====")
print(answer)